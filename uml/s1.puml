@startuml detailedClassDiagram

' Define classes for system architecture with attributes and methods

class "HomePage"{
    - dishInquiryPage: DishInquiryPage
    - recommendationSystem: RecommendationSystem
    - accountManagement: AccountManagement
    - recipeManagement: RecipeManagement
    + dishInquiry()
    + login()
    + createAccount()
    + deleteAccount()
    + getRecommendation()
    + addRecipe()
}

class "DishDetermination" {
    -confidenceLevel: float
    -identifiedDish: String
    +identifyDish(image: Image, text: String, ingredients: List<String>): String
    -resolveConflicts()
    -calculateConfidence()
}

abstract "DishPredictor"{
    + predictDish()
}

class "ImageRecognition" {
    -model: MLModel
    +pareImage(image: Image): Image
    +predictDish(image: Image): String
    +trainModel(data: Dataset)
}

class "TextAnalysis" {
    -languageModel: NLPModel
    +pareText(text: String): String
    +predictDish(text: String): String
    +extractKeywords(text: String): List<String>
}

class "IngredientAnalysis" {
    +predictDish(ingredients: List<String>): String
    +pareIngredients(ingredients: List<String>): List<String>
    +findSimilarIngredients(ingredient: String): List<String>
}

class "RecipeManagement" {
    -recipeList: List<Recipe>
    +addRecipe(name: String, ingredients: List<String>, steps: String)
    +getRecipe(name: String): Recipe
    +validateRecipe(recipe: Recipe): Boolean
}

class "RecommendationSystem" {
    -userPreferences: Map<String, List<String>>
    +suggestDishes(userHistory: List<String>): List<String>
    +suggestRestaurants(dish: String): List<String>
    +updatePreferences(userID: String, dish: String)
}

class "AccountManagement" {
    - user: Map<String, User>
    - userHistory: Map<User, UserHistory>
    +createAccount(email: String, password: String)
    +logIn(email: String, password: String): Boolean
    +deleteAccount(userID: String)
    +updateProfile(userID: String, preferences: List<String>)
}

class "DishInquiryPage" {
    +submitDishDetails(image: Image, text: String, ingredients: List<String>)
    +displayDishResults(dish: Dish)
}

class "User" {
    -userID: String
    -email: String
    -password: String
    -preferences: List<String>
    +updatePreferences(newPreferences: List<String>)
}

class "UserHistory" {
    - user: User
    - likeHistory: List<Dish>
    - searchHistory: List<Dish>
    + getUserLikeHistory(user: User): List<Dish>
    + getUserSearchHistory(user: User): List<Dish>
}

class "Recipe" {
    -name: String
    -ingredients: List<String>
    -steps: List<String>
    +displayRecipe()
    +getIngredientsList()
}

class "Dish" {
    -name: String
    -nutritionInfo: String
    -origin: String
    +getNutritionInfo(): String
}

class "FoodPictureDatabase" {
    -images: Map<String, Image>
    +storeImage(image: Image, dishName: String)
    +retrieveImage(dishName: String): Image
}

class "DishDatabase" {
    -dishes: Map<String, Dish>
    +getDishByName(name: String): Dish
    +getDishesByIngredients(ingredients: List<String>): List<Dish>
}

class Address{
    - unit: int
    - roadName: String
    - city: String
    - pronvince: String
    - postalCode: String
    - phoneNumber: int
    + getAddress()
}

class Restarant {
    - name: String
    - address: Address
    - servedDishes: Dish
    + getAddress(): Address
    + getServedDishes(category: String): List<Dish>
}

class "RestaurantDatabase" {
    -restarant: Restarant
    +distanceToRestarant(currentLocation: Address): float
    +getServedDishes(): List<Dish>
}

class "RecipeDatabase" {
    -recipes: Map<Dish, Recipe>
    +storeRecipe(recipe: Recipe)
    +getRecipe(dishName: Dish): Recipe
}

class "FoodNutrition" {
    - food: String
    - nutrients: Map<String, int>
    + getNutrientInfo(food: String)
}

class "FoodNutritionDatabase" {
    - foodNutrients: Map<string, FoodNutrition>
    + getNutrientInfo(food: String)
}


' Relationships

HomePage *-- DishInquiryPage
HomePage *-- AccountManagement
HomePage *-- RecipeManagement
HomePage *-- RecommendationSystem

DishInquiryPage --> DishDetermination 
DishDetermination "1"*--"3+" DishPredictor
DishPredictor <|-- ImageRecognition
DishPredictor <|-- TextAnalysis
DishPredictor <|-- IngredientAnalysis

ImageRecognition --> FoodPictureDatabase 
TextAnalysis --> DishDatabase 
IngredientAnalysis --> RecipeDatabase

RecommendationSystem --> RestaurantDatabase
RecommendationSystem --> UserHistory 

AccountManagement --> User
AccountManagement --> UserHistory

RecipeManagement --> RecipeDatabase 


' Databases
DishDatabase --> Dish
DishDatabase *-- RecipeDatabase
DishDatabase *-- FoodNutritionDatabase
FoodNutritionDatabase o-- FoodNutrition

RestaurantDatabase o-- Restarant
Restarant *-- Address
Restarant --> Dish

RecipeDatabase o-- Recipe


@enduml